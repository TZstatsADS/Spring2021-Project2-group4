shiny::runApp()
runApp()
runApp()
View(cv_cases)
View(countries)
head(cv_cases)
print(head(cv_cases))
display(head(cv_cases))
weather_con <- DBI::dbConnect(RSQLite::SQLite(), "../output/weather_data.sqlite")
install.packages("RSQLite")
library(RSQLite)
weather_con <- DBI::dbConnect(RSQLite::SQLite(), "../output/weather_data.sqlite")
library(dplyr)
library(dbplyr)
library(dbplot)
library(DBI)
library(tidyverse)
library(data.table)
# Access sqlite DB
weather_con <- DBI::dbConnect(RSQLite::SQLite(), "../output/weather_data.sqlite")
test <- dbSendQuery(conn = weather_con, statement = "SELECT * from weather where random() <= 0.1 LIMIT 1000")
test_sel <- dbFetch(test)
print(test_sel)
print(colnames(test_sel))
foo <- separate(test_sel, "NAME", c("Station_Name", "Country"), sep= ", ")
print(foo)
rm(foo)
rm(test)
rm(test_sel)
test <- dbSendQuery(conn = weather_con, statement = "SELECT DISTINCT(DATE) from weather_transformed")
test_sel <- dbFetch(test)
head(test_sel)
names <- dbSendQuery(conn = weather_con, statement = "SELECT DISTINCT(NAME) from weather ORDER BY NAME ASC")
names_sel <- dbFetch(names)
print(names_sel)
num_days <- 31 + 366 + 31
weather <- tbl(weather_con, "weather") %>% select(STATION, DATE, NAME, TEMP, MAX, MIN, FRSHTT)
weather
num_total <- weather %>% summarise(n()) %>% collect()
num_total <- num_total$`n()`
#%>% add_column(separate(), w = 0)
num_missing <- weather %>% filter(TEMP == 9999.9 | MAX == 9999.9 | MIN == 9999.9) %>% summarise(n()) %>% collect()
num_missing <- num_missing$`n()`
perc_missing <- num_missing/num_total; perc_missing
name_missing <- weather %>% filter(is.na(NAME)) %>% summarise(n()) %>% collect()
name_missing <- name_missing$`n()`
perc_missing <- name_missing/num_total; perc_missing
weather <- weather %>% filter(TEMP != 9999.9 & MAX != 9999.9 & MIN != 9999.9) %>% filter(!is.na(NAME))
weather <- dbSendQuery(conn = weather_con, statement = "SELECT DATE, SUBSTR(NAME, INSTR(NAME, ', ') + 2) as Country_Code, AVG(TEMP), AVG(MAX), AVG(MIN), AVG(PRCP) FROM weather WHERE NAME IS NOT NULL AND TEMP <> 9999.9 AND MAX <> 9999.9 AND MIN <> 9999.9 GROUP BY Country_Code, DATE " )
weather_sel <- dbFetch(weather)
head(weather_sel)
# all_sel <- separate(all_sel, "NAME", c("Station_Name", "Country"), sep= ", ")
# head(all_sel)
View(cv_cases)
weather_sel <- weather_sel %>% separate("Country_Code", c("State_Name", "Country"), sep= " ", fill = "left")
head(weather_sel)
# Double check that it works for US States
weather_sel %>% filter(Country %like% 'US')
dbWriteTable(
weather_con,
"weather_transformed",
weather_sel,
overwrite=TRUE
)
test <- dbSendQuery(conn = weather_con, statement = "SELECT DISTINCT(DATE) from weather_transformed")
test_sel <- dbFetch(test)
head(test_sel)
test <- dbSendQuery(conn = weather_con, statement = "SELECT Country DISTINCT(DATE) from weather_transformed")
test <- dbSendQuery(conn = weather_con, statement = "SELECT Country, DISTINCT(DATE) from weather_transformed")
test <- dbSendQuery(conn = weather_con, statement = "SELECT * from weather_transformed")
test_sel <- dbFetch(test)
head(test_sel)
test <- dbSendQuery(conn = weather_con, statement = "SELECT DISTINCT(DATE) from weather_transformed")
test_sel <- dbFetch(test)
head(test_sel)
weather_con <- DBI::dbConnect(RSQLite::SQLite(), "../output/weather_data.sqlite")
weather <- dbSendQuery(conn = weather_con, statement = "SELECT * from weather_transformed")
df_weather <- dbFetch(weather)
head(weather)
weather_con <- DBI::dbConnect(RSQLite::SQLite(), "../output/weather_data.sqlite")
weather <- dbSendQuery(conn = weather_con, statement = "SELECT * from weather_transformed")
df_weather <- dbFetch(weather)
head(df_weather)
rm(test)
rm(test_sel)
df_weather %>%
rename(
DATE = date,
Country = alpha2
)
df_weather %>%
rename(
date = DATE,
alpha2 = Country
)
df_weather[ , !(names(df_weather) %in% c('State_Name', 'AVF(MAX)', 'AVF(MIN)', 'AVF(PRCP)')]
df_weather <- subset(df_weather, select = c(date, alpha2, AVG(TEMP)))
head(df_weather)
# df_weather <- subset(df_weather, select = c(date, alpha2, AVG(TEMP)))
df_weather <- df_weather %>%
rename(
date = DATE,
alpha2 = Country
)
df_weather <- subset(df_weather, select = c(date, alpha2, AVG(TEMP)))
df_weather
df_weather[AVG(TEMP)]
df_weather['AVG(TEMP)']
df_weather <- subset(df_weather, select = c(date, alpha2, 'AVG(TEMP)'))
df_weather <- subset(df_weather, select = c('date', 'alpha2', 'AVG(TEMP)'))
head(df_weather)
merge(cv_cases, df_weather, by=c("date","alpha2"))
sum(is.na(cv_cases$AVG(TEMP)))
sum(is.na(cv_cases$'AVG(TEMP)'))
df_rolling <- read.csv('../output/Covid_Cases_Rolling_Increases.csv')
head(df_rolling)
df_rolling <- read.csv('../output/Covid_Cases_Rolling_Increases.csv')
df_rolling <- subset(df_rolling, select = -c('X'))
df_rolling <- read.csv('../output/Covid_Cases_Rolling_Increases.csv')
df_rolling <- subset(df_rolling, select = c-('X'))
df_rolling <- read.csv('../output/Covid_Cases_Rolling_Increases.csv')
df_rolling <- df_rolling[,-1]
head(df_rolling)
df_rolling <- read.csv('../output/Covid_Cases_Rolling_Increases.csv')
df_rolling <- df_rolling[,-1]
df_rolling <- df_rolling %>%
rename(
date = Date,
jhu_ID.x = jhu_ID
)
head(df_rolling)
merge(cv_cases, df_rolling, by=c("jhu_ID.x","date"))
runApp()
runApp()
summ(cv_cases$`AVG(TEMP)`)
summary(cv_cases$`AVG(TEMP)`)
runApp()
runApp()
rb_rev <- rev(brewer.pal("RdYlBu"))
rb_rev <- rev(brewer.pal("RdYlBu"))
rb_rev <- rev(brewer.pal(6, "RdYlBu"))
previewColors(colorNumeric(palette = rb_rev ,domain = 1:6), values = 1:6)
rb_rev <- rev(brewer.pal(7, "RdYlBu"))
runApp()
summary(cv_cases$`AVG(TEMP)`)
quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1))
runApp()
quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1))
quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)).values
quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)).values()
percentiles=quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)).values()
percentiles=quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1))
percentiles
percentiles[0]
unname(percentiles)
round(unname(percentiles))
runApp()
bins
round(unname(percentiles))
percentiles
quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1))
runApp()
bins
percentiles
unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
percentiles = unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
percentiles
rm(percentiles)
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
percentiles
rm(percentiles)
runApp()
unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
c(unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1))))
percentiles
unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
percentiles
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
bins = c(round(percentiles))
runApp()
runApp()
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.1)))
round(percentiles)
runApp()
View(cv_cases)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.2)))
percentiles
percentiles <- unname(quantile(cv_cases$`AVG(TEMP)`, probs = seq(0, 1, by= 0.25)))
percentiles
runApp()
head(cv_cases)
View(cv_aggregated)
aggregate(cv_cases[cv_cases$latitude >= 15]$cases, by=list(Category=cv_cases$date), FUN=sum)
cv_cases$latitude >= 15
[cv_cases$latitude >= 15]$cases
aggregate(cv_cases[cv_cases$latitude >= 15,]$cases, by=list(Category=cv_cases$date), FUN=sum)
aggregate(cv_cases[cv_cases$latitude >= 15,]$cases, by=list(Category=cv_cases[cv_cases$latitude >= 15,]$date), FUN=sum)
runApp()
runApp()
runApp()
View(cv_aggregated)
View(cv_aggregated_northern)
View(cv_aggregated_southern)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cv_aggregated_northern)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
reactive_db_northern
db = reactive_db_northern = reactive({
db=cv_cases_northern
if (input$outcome_select=="Cases (total)") {
db$outcome = db$cases
db$new_outcome = db$new_cases
}
if (input$outcome_select=="Deaths (total)") {
db$outcome = db$deaths
db$new_outcome = db$new_deaths
}
if (input$outcome_select=="Cases per million") {
db$outcome = db$cases_per_million
db$new_outcome = db$new_cases_per_million
}
if (input$outcome_select=="Deaths per million") {
db$outcome = db$deaths_per_million
db$new_outcome = db$new_deaths_per_million
}
db
})
rm(db)
reactive_db_northern = reactive({
db=cv_cases_northern
if (input$outcome_select=="Cases (total)") {
db$outcome = db$cases
db$new_outcome = db$new_cases
}
if (input$outcome_select=="Deaths (total)") {
db$outcome = db$deaths
db$new_outcome = db$new_deaths
}
if (input$outcome_select=="Cases per million") {
db$outcome = db$cases_per_million
db$new_outcome = db$new_cases_per_million
}
if (input$outcome_select=="Deaths per million") {
db$outcome = db$deaths_per_million
db$new_outcome = db$new_deaths_per_million
}
db
})
db = reactive_db_northern()
View(cv_aggregated_northern)
runApp()
View(cv_aggregated_northern)
aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)
aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)[1]
aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)[2]
runApp()
View(cv_aggregated_northern)
aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)[2]
c(aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)[2])
runApp()
runApp()
cv_aggregated_southern
cv_aggregated_northern
cv_aggregated_northern$test=1
cv_aggregated_northern
cv_aggregated_northern$test=c(aggregate(cv_cases_northern$deaths, by=list(cv_cases_northern$date), FUN=sum)[2])
cv_aggregated_northern
runApp()
View(cv_cases_northern)
aggregate(list(cv_cases_southern$cases, cv_cases_northern$deaths), by=list(Category=cv_cases_southern$date), FUN=sum)
len(aggregate(list(cv_cases_southern$cases, by=list(Category=cv_cases_southern$date), FUN=sum)) == len(aggregate(list(cv_cases_northern$deaths), by=list(Category=cv_cases_southern$date), FUN=sum))
len(aggregate(list(cv_cases_southern$cases, by=list(Category=cv_cases_southern$date), FUN=sum))
length(aggregate(list(cv_cases_southern$cases, by=list(Category=cv_cases_southern$date), FUN=sum))
length(c(aggregate(list(cv_cases_southern$cases, by=list(Category=cv_cases_southern$date), FUN=sum)))
runApp()
View(cv_aggregated_northern)
runApp()
View(cv_aggregated)
View(cv_aggregated_northern)
runApp()
View(cv_aggregated_northern)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(cv_aggregated_northern)
runApp()
runApp()
runApp()
runApp()
